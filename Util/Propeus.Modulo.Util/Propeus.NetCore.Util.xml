<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Propeus.NetCore.Util</name>
    </assembly>
    <members>
        <member name="T:Propeus.NetCore.Util.Attributes.Helper">
            <summary>
            Classe de ajuda para <see cref="T:System.Attribute" />
            </summary>
        </member>
        <member name="M:Propeus.NetCore.Util.Attributes.Helper.ObterAtributo``1(System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData})">
            <summary>
            Obtém um atributo a partir de uma lista de atributos
            </summary>
            <typeparam name="T">Tipo do atributo a ser procurado</typeparam>
            <param name="obj">Lista de atributos</param>
            <returns>T</returns>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="obj" /> vazio ou nulo</exception>
            <exception cref="T:System.InvalidOperationException">Atributo <typeparamref name="T" /> não encontrado</exception>
            <exception cref="T:System.InvalidOperationException">Tipo do parâmetro <paramref name="obj" /> herdado da classe <see cref="T:System.Attribute" /></exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Attributes.Helper.ObterAtributo``1(System.Type)">
            <summary>
            Obtem um atributo a partir de um tipo especifico.
            </summary>
            <typeparam name="T">Tipo do atributo a ser procurado</typeparam>
            <param name="obj">Qualquer objeto do tipo <see cref="T:System.Type" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="obj" /> nulo</exception>
            <exception cref="T:System.InvalidOperationException">Atributo <typeparamref name="T" /> não encontrado</exception>
            <exception cref="T:System.InvalidOperationException">Tipo do parâmetro <paramref name="obj" /> herdado da classe <see cref="T:System.Attribute" /></exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Attributes.Helper.ObterAtributo``1(System.Object)">
            <summary>
            Obtém um atributo a partir de um objeto especifico.
            </summary>
            <typeparam name="T">Tipo do atributo a ser procurado</typeparam>
            <param name="obj">Qualquer objeto do tipo <see cref="T:System.Object" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="obj" /> nulo</exception>
            <exception cref="T:System.InvalidOperationException">Atributo <typeparamref name="T" /> não encontrado</exception>
            <exception cref="T:System.InvalidOperationException">Tipo do parâmetro <paramref name="obj" /> herdado da classe <see cref="T:System.Attribute" /></exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Attributes.Helper.ObterAtributos``1(System.Type)">
            <summary>
            Obtém uma lista de atributos a partir de um tipo especifico.
            </summary>
            <typeparam name="T">Tipo do atributo a ser procurado</typeparam>
            <param name="obj">Qualquer objeto do tipo <see cref="T:System.Type" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="obj" /> nulo</exception>
            <exception cref="T:System.InvalidOperationException">Tipo do parâmetro <paramref name="obj" /> herdado da classe <see cref="T:System.Attribute" /></exception>
            <exception cref="T:System.InvalidOperationException">Atributo <typeparamref name="T" /> não encontrado</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Attributes.Helper.PossuiAtributo``1(System.Object)">
            <summary>
            Verifica se o <paramref name="obj" /> possui o atributo
            </summary>
            <typeparam name="T">Tipo do atributo a ser procurado</typeparam>
            <param name="obj">Qualquer objeto do tipo <see cref="T:System.Object" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="obj" /> nulo</exception>
            <exception cref="T:System.InvalidOperationException">Tipo do parâmetro <paramref name="obj" /> herdado da classe <see cref="T:System.Attribute" /></exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Attributes.Helper.PossuiAtributo``1(System.Reflection.PropertyInfo)">
            <summary>
            Verifica se o <see cref="T:System.Reflection.PropertyInfo" /> possui o atributo
            </summary>
            <typeparam name="T">Tipo do atributo a ser procurado</typeparam>
            <param name="obj">Qualquer objeto do tipo <see cref="T:System.Reflection.PropertyInfo" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="obj" /> nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Attributes.Helper.PossuiAtributo``1(System.Type)">
            <summary>
            Verifica se o <see cref="T:System.Type" /> possui o atributo
            </summary>
            <typeparam name="T">Tipo do atributo a ser procurado</typeparam>
            <param name="obj">Qualquer objeto do tipo <see cref="T:System.Type" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="obj" /> nulo</exception>
        </member>
        <member name="T:Propeus.NetCore.Util.Constantes.Constantes">
            <summary>
            Classe estática contendo valores constantes
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.ARGUMENTO_NULO_OU_VAZIO">
            <summary>
            Constante para relato de erro em parametros com valores nulos ou vazios
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.ARGUMENTO_NULO">
            <summary>
            Constante para relato de erro em parametros com valores nulos
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.ARGUMENTO_NAO_E_DO_TIPO">
            <summary>
            Constante para relato de erro em parametros com tipo diferente do especificado
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.ARGUMENTO_NAO_PODE_SER_DO_TIPO">
            <summary>
            Constante para relato de erro em parametros com tipo diferente do especificado
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.ATRIBUTO_NAO_ENCONTRADO">
            <summary>
            Constante para relato de erro em atributos não encontrados
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.PARAMETRO_ATRIBUTO_INVALIDO">
            <summary>
            Constante para relato de erro em parametros com objetos herdados de Attribute
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.PARAMETRO_NAO_CONVERTIDO">
            <summary>
            Constante para relato de erro em parametros não convertidos para o tipo especificado
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.TIPO_NAO_CONVERTIDO">
            <summary>
            Constante para relato de erro em tipos de conversão explicita
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.TIPO_NAO_ENCONTRADO">
            <summary>
            Constante para relato de erro em tipos não encontrados no assembly
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.ENUM_SEM_DESCRICAO">
            <summary>
            Constante para relato de erro em enums sem descrição
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.OBSOLETO_REMOCAO">
            <summary>
            Constante para relato de metodo obsoleto
            </summary>
        </member>
        <member name="F:Propeus.NetCore.Util.Constantes.Constantes.PROGRAMA_NAO_ENCONTRADO">
            <summary>
            Constante para relato de erro ao tentar encontrar o caminho do proprio executavel
            </summary>
        </member>
        <member name="T:Propeus.NetCore.Util.Enums.Helper">
            <summary>
            Classe de ajuda para <see cref="T:System.Enum" />
            </summary>
        </member>
        <member name="M:Propeus.NetCore.Util.Enums.Helper.ConcatenarEnum``1(``0[])">
            <summary>
            Concatena um arry de <see cref="T:System.Enum" /> em um unico Enum
            </summary>
            <typeparam name="TEnum"><see cref="T:System.Enum" /> qualquer.</typeparam>
            <param name="enum">Array de <see cref="T:System.Enum" /></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">O tipo não é <see cref="T:System.Enum" /></exception>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="enum" /> vazio ou nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Enums.Helper.ObterDescricaoEnum``1(``0)">
            <summary>
            Obtem a descrição do enum
            </summary>
            <typeparam name="TEnum"><see cref="T:System.Enum" /> a ser obtido a descrição</typeparam>
            <param name="enum">Valor do <see cref="T:System.Enum" /> que será obtido a descrição </param>
            <returns></returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T:System.Enum" /> sem descrição</exception>
            <exception cref="T:System.ArgumentException">Argumento <paramref name="enum" /> nulo</exception>
        </member>
        <member name="T:Propeus.NetCore.Util.Lists.Helper">
            <summary>
            Classe de ajuda para listas
            </summary>
        </member>
        <member name="M:Propeus.NetCore.Util.Lists.Helper.Join``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtem os itens em comum entre duas listas.
            </summary>
            <typeparam name="T">Tipo da lista</typeparam>
            <param name="esquerda">Lista da esquerda</param>
            <param name="direita">Lista da direita</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Parametro nulo</exception>
        </member>
        <member name="T:Propeus.NetCore.Util.Objects.Helper">
            <summary>
            Classe de ajuda para tipos <see cref="T:System.Object" />
            </summary>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Serializar(System.Object)">
            <summary>
            Serializa um objeto em array de <see cref="T:System.Byte" />
            </summary>
            <param name="obj">Qualuer objeto do tipo <see cref="T:System.Object" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Objeto não serializavel</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Serializar``1(System.Runtime.Serialization.SerializationInfo,``0)">
            <summary>
            Serializa qualquer objeto e insere os dados no objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializationInfo">Objeto com as informações de serialização</param>
            <param name="cls">Objeto do tipo class></param>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Deserializar``1(System.Byte[])">
            <summary>
            Deserializa o array de bytes ao estado original.
            </summary>
            <typeparam name="TObjeto"></typeparam>
            <param name="obj">Array de bytes</param>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Objeto não serializavel</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Deserializar(System.Byte[],System.Type)">
            <summary>
            Deserializa um <see cref="T:System.Array" /> de <see cref="T:System.Byte" />
            </summary>
            <param name="obj"><see cref="T:System.Array" />de <see cref="T:System.Byte" /> a serem convertidos</param>
            <param name="type">Tipo a ser convertido</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Objeto não serializavel</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Deserializar``1(System.Runtime.Serialization.SerializationInfo,``0)">
            <summary>
            Deserializa o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> para o objeto definido
            </summary>
            <typeparam name="T">Tipo do objeto</typeparam>
            <param name="serializationInfo">Objeto serializado</param>
            <param name="obj">Instancia do objeto</param>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.CopiarPropriedades``2(``0)">
            <summary>
            Cria uma nova instacia de <typeparamref name="TPara" /> e copia as propriedades de <typeparamref name="TDe" />
            </summary>
            <typeparam name="TPara">Tipo da saida</typeparam>
            <typeparam name="TDe">Tipo de entrada</typeparam>
            <param name="de">Instancia do objeto de entrada</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.ObterPropriedadeInfoType``1(``0)">
            <summary>
            Obtem todas as propriedades de um objeto
            </summary>
            <typeparam name="T">Tipo do objeto</typeparam>
            <param name="obj">Instancia do objeto</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.ObterValorPropriedade``1(``0,System.Reflection.PropertyInfo)">
            <summary>
            Obtem o valor de uma proprieddade de uma classe.
            </summary>
            <typeparam name="TClase">Tipo da classe</typeparam>
            <param name="obj">Objeto do tipo class</param>
            <param name="property">Propriedade que será obtido o valor</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.InserirValorPropriedade``1(``0,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Insere um valor em uma propriedade
            </summary>
            <typeparam name="TClase">Tipo da classe</typeparam>
            <param name="obj">Classe onde será inserido o valor</param>
            <param name="property">Propriedade onde será inserido o valor</param>
            <param name="valor">Valor a ser inserido</param>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Reflection.TargetException"></exception>
            <exception cref="T:System.MethodAccessException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.ToArrayByte(System.String)">
            <summary>
            Converte uma <see cref="T:System.String" /> em um array de bytes
            </summary>
            <param name="obj">Qualquer objeto do tipo <see cref="T:System.String" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.FirstSplit(System.String,System.Char)">
            <summary>
            Quebra uma string na primeira ocorrência
            </summary>
            <param name="str">String a ser separado</param>
            <param name="separator">Delimitador que será utilizado para a quebra de string</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.FirstReplace(System.String,System.String,System.String)">
            <summary>
            Substitui a primeira ocorrencia de uma string pela mais recente
            </summary>
            <param name="str">Conteudo a ser manipulado</param>
            <param name="antigo">Conteudo antigo a ser substituido</param>
            <param name="novo">Novo conteudo a ser inserido</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Herdado(System.Object,System.Type)">
            <summary>
            Verifica se o objeto é herdado do tipo passado no parametro <paramref name="comparacao" />
            </summary>
            <param name="obj">Classe a ser verificado</param>
            <param name="comparacao">Tipo a ser comparado</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Herdado(System.Type,System.Type)">
            <summary>
            Verifica se o tipo é herdado do tipo passado no parametro <paramref name="comparacao" />
            </summary>
            <param name="obj">Tipo a ser verificado</param>
            <param name="comparacao">Tipo a ser comparado</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Herdado``1(System.Object)">
            <summary>
            Verifica se o objeto é herdado do tipo passado no tipo <typeparamref name="T" />
            </summary>
            <param name="obj">Classe a ser verificado</param>
            <typeparam name="T">Tipo a ser comparado</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Herdado``1(System.Type)">
            <summary>
            Verifica se o tipo é herdado do tipo passado no parametro <typeparamref name="T" />
            </summary>
            <param name="type">Tipo a ser verificado</param>
            <typeparam name="T">Tipo a ser comparado</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Verifica se uma lista contem os parametros passados.
            </summary>
            <typeparam name="T">Tipo do parametro a ser verificado</typeparam>
            <param name="ts">Lista do tipo <typeparamref name="T" /></param>
            <param name="tsc">Parametros do tipo <typeparamref name="T" /></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Is``1(System.Object)">
            <summary>
            Verifica se o objeto é do tipo <typeparamref name="T" />
            </summary>
            <typeparam name="T">Tipo a ser validado</typeparam>
            <param name="obj">Objeto a ser verificado</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Is(System.Object,System.Type)">
            <summary>
             Verifica se o objeto <paramref name="obj" /> é igual ou herdado de <paramref name="comparacao" />
            </summary>
            <param name="comparacao">Tipo a ser validado</param>
            <param name="obj">Objeto a ser verificado</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Is``1(System.Type)">
            <summary>
            Verifica se o tipo <paramref name="obj" /> é igual ou herdado de <typeparamref name="T" />
            </summary>
            <typeparam name="T">Tipo a ser comparado</typeparam>
            <param name="obj">Tipo a ser validado</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Is(System.Type,System.Type)">
            <summary>
             Verifica se o tipo <paramref name="obj" /> é igual ou herdado de <paramref name="comparacao" />
            </summary>
            <param name="obj">Tipo a ser validado</param>
            <param name="comparacao">Tipo a ser comparado</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.To``1(System.Object)">
            <summary>
            Converte qualquer objeto para o tipo desejado
            </summary>
            <typeparam name="T">Tipo a ser convertido</typeparam>
            <param name="obj">Objeto a ser convertido</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.To(System.Object,System.Type)">
            <summary>
            Converte qualquer objeto para o tipo desejado
            </summary>
            <param name="para">Tipo a ser convertido</param>
            <param name="obj">Objeto a ser convertido</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.As``1(System.Object,``0)">
            <summary>
            Tenta converter o <paramref name="obj" /> em <typeparamref name="T" />, caso não consiga será retornado o valor padrão de <typeparamref name="T" /> ou o valor passado no parametro <paramref name="padrao" />
            </summary>
            <typeparam name="T">Tipo a ser convertido</typeparam>
            <param name="obj">Objeto a ser convertido em <typeparamref name="T" /></param>
            <param name="padrao">Valor padrão em caso de erro.</param>
            <returns><typeparamref name="T" /> ou <paramref name="padrao" /></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.As(System.Object,System.Type,System.Object)">
            <summary>
            Tenta converter o <paramref name="obj" /> em <paramref name="como" />, caso não consiga será retornado nulo ou o valor passado no parametro <paramref name="padrao" />
            </summary>
            <param name="como">Tipo a ser convertido</param>
            <param name="obj">Objeto a ser convertido no tipo do parametro <paramref name="como" /></param>
            <param name="padrao">Valor padrão em caso de erro.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
            <exception cref="T:System.ArgumentException">Argumento invalido</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Not(System.Boolean)">
            <summary>
            Nega o resultado booleano
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifica se a lista esta vazia
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifica se a lista não esta vazia
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNullOrEmpty(System.String)">
            <summary>
            Verifica se a string esta vazia ou nula
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifica se a lista é nula ou vazia
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifica se a lista não é nula ou vazia
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNull``1(``0)">
            <summary>
            Verifica se a classe é nula
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsVoid(System.Type)">
            <summary>
            Verifica se o tipo é void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNotVoid(System.Type)">
            <summary>
            Verifica se o tipo é diferente de void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNotNullAndNotVoid(System.Type)">
            <summary>
            Verifica se o tipo não é nulo e diferente de void
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNullOrDefault(System.Object)">
            <summary>
            Verifica se o objeto é nulo ou possui um valor padrão
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsDefault(System.Object)">
            <summary>
            Verifica se o objeto possui o valor padrão
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNotNull``1(``0)">
            <summary>
            Verifica se o objeto não é nulo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNotNull(System.Object)">
            <summary>
            Verifica se o objeto não é nulo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.IsNull(System.Object)">
            <summary>
            Verifica se o objeto é nulo
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Default(System.Type)">
            <summary>
            Obtem o valor padrão do tipo passado no parametro <paramref name="obj" />
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Hash(System.Byte[])">
            <summary>
            Obtem o hash de um array de bytes
            </summary>
            <param name="bytes"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Objects.Helper.Hash(System.Object)">
            <summary>
            Obtem o hash de um objeto serializavel
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
        </member>
        <member name="T:Propeus.NetCore.Util.Reflection.Helper">
            <summary>
            Classe de ajuda para reflection
            </summary>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterTipoParametros(System.Reflection.ConstructorInfo)">
            <summary>
            Obtem os tipos dos parametros do construtor selecionado
            </summary>
            <param name="action"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterTipoParametros(System.Reflection.MethodInfo)">
            <summary>
            Obtem os tipos dos parametros do metodo selecionado
            </summary>
            <param name="action"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterTipoParametros(System.Reflection.PropertyInfo)">
            <summary>
            Obtem os tipos dos parametros da propriedade selecionada
            </summary>
            <param name="action"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterTipoParametros(System.Action)">
            <summary>
            Obtem os tipos dos parametros do action selecionado
            </summary>
            <param name="action"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterInterfaces(System.Object)">
            <summary>
            Obtem as interfaces do objeto selecionado
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterInterfaces(System.Type)">
            <summary>
            Obtem as interfaces do tipo selecionado
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterMetodos(System.Object,System.String)">
            <summary>
            Obtem todos os metodos do objeto que possuem o mesmo nome
            </summary>
            <param name="obj"></param>
            <param name="nome"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterMetodos(System.Type,System.String)">
            <summary>
            Obtem todos os metodos do tipo que possuem o mesmo nome
            </summary>
            <param name="obj"></param>
            <param name="nome"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterMetodos(System.Object)">
            <summary>
            Obtem todos os metodos do objeto.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterMetodos(System.Type)">
            <summary>
            Obtem todos os metodos do tipo.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ExisteMetodo(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Verifica se existe o metodo informado
            </summary>
            <param name="obj"></param>
            <param name="mth"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ExisteMetodo(System.Type,System.Action)">
            <summary>
            Verifica se existe o procedimento informado
            </summary>
            <param name="obj"></param>
            <param name="action"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ExisteMetodo``1(``0,System.Action)">
            <summary>
            Verifica se existe o procedimento informado
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="action"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ExisteMetodo``1(System.Action)">
            <summary>
            Verifica se existe o procedimento informado no tipo <typeparamref name="T" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ExisteMetodo``1(System.String)">
            <summary>
            Verifica se existe o procedimento informado no tipo <typeparamref name="T" /> pelo nome fornecido no parametro <paramref name="nome" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nome"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterMetodoComMaiorParametros(System.Type,System.String)">
            <summary>
            Obtem o metodo com maior quantidade de parametros.
            </summary>
            <param name="obj"></param>
            <param name="nome"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterMetodo(System.Object,System.String,System.Type[])">
            <summary>
            Obtem o metodo que possua o mesmo nome, quantidade e tipo de parametros
            </summary>
            <param name="obj"></param>
            <param name="nome"></param>
            <param name="params"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterMetodo(System.Type,System.String,System.Type[])">
            <summary>
            Obtem o metodo que possua o mesmo nome, quantidade e tipo de parametros
            </summary>
            <param name="obj"></param>
            <param name="nome"></param>
            <param name="params"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterMetodo(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Obtem o metodo que possua a mesma assinatura
            </summary>
            <param name="obj"></param>
            <param name="mth"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterPropriedade(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Obtem a propriedade que possua a mesma assinatura
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterEvento(System.Type,System.Reflection.EventInfo)">
            <summary>
            Obtem o evento que possua a mesma assinatura
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.InvocarMetodo(System.Object,System.String,System.Object[])">
            <summary>
            Realiza uma chamada a um metodo
            </summary>
            <param name="obj"></param>
            <param name="nome"></param>
            <param name="args"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterParametrosMetodo(System.Object,System.String)">
            <summary>
            Obtem os parametros de um metodo
            </summary>
            <param name="obj"></param>
            <param name="nome"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ExisteMetodo(System.Object,System.String)">
            <summary>
            Verifica se existe o metodo no objeto passado no parametro <paramref name="obj" />
            </summary>
            <param name="obj"></param>
            <param name="nome"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Argumento nulo ou vazio</exception>
        </member>
        <member name="M:Propeus.NetCore.Util.Reflection.Helper.ObterPathProgramaAtual">
            <summary>
            Obtem o caminho completo do arquivo .exe ou .dll que esta sendo executado no momento
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>